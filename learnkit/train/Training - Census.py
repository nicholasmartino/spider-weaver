from Training import train_random_forest_regression
from Variables import *

CDA_GDF = gpd.read_file(GPK, layer='land_dissemination_area')


aff = AffordabilityAnalyzer(CDA_GDF, OLD_NETWORK)
aff.gdf = aff.aggregate_spatial_indicators(directory=f'{DIRECTORY}/{CITY}', layers=LAYERS, radii=RADII)
aff.gdf = aff.get_distance_to_cbd(CBD_GDF)
aff.gdf.to_feather(f'{DIRECTORY}/{CITY}/land_dissemination_area.feather')


def load_census_data():
	gdf = gpd.read_feather(f'{DIRECTORY}/{CITY}/land_dissemination_area.feather')
	DROP = ['DAUID', 'PRUID', 'PRNAME', 'CDUID', 'CDNAME', 'CDTYPE', 'CCSUID', 'CCSNAME', 'CSDUID', 'CSDNAME',
	        'CSDTYPE',
	        'ERUID', 'ERNAME', 'SACCODE', 'SACTYPE', 'CMAUID', 'CMAPUID', 'CMANAME', 'CMATYPE', 'CTUID', 'CTNAME',
	        'ADAUID',
	        'Geographic code', 'Province / territory, english', 'Province / territory, french',
	        'Geographic code, Province / territory',
	        'Geographic code, Census division', 'Geographic code, Census subdivision', 'Population, 2016',
	        'Incompletely enumerated Indian reserves and Indian settlements, 2016',
	        'n_dwellings', 'Private dwellings occupied by usual residents, 2016',
	        'Land area in square kilometres, 2016',
	        'Population density per square kilometre, 2016', 'Unnamed: 12', 'index_right', 'place_name', 'bbox_north',
	        'bbox_south',
	        'bbox_east', 'bbox_west', 'age_div_sh', 'ethnic_div_sh', 'ethnic_div_si', 'ed_total', 'no_certificate',
	        'secondary',
	        'postsecondary', 'no_postsecondary', 'education', 'arts', 'humanities', 'social', 'business', 'natural',
	        'information',
	        'engineering', 'agriculture', 'health', 'protective', 'other', 'no_certificate_ratio', 'secondary_ratio',
	        'postsecondary_ratio',
	        'no_postsecondary_ratio', 'educ_div_sh', 'educ_div_si', 'total_tenure', 'Owner', 'Renter', 'Band housing',
	        'total_cond',
	        'Condominium', 'Not condominium', 'total_bedr', 'No bedrooms', '1 bedroom', '2 bedrooms', '3 bedrooms',
	        '4 or more bedrooms',
	        'total_rooms', '1 to 4 rooms', '5 rooms', '6 rooms', '7 rooms', '8 or more rooms', 'ave_n_rooms',
	        'total_people_per_room',
	        'One person or fewer per room', 'More than 1 person per room', 'total_suitability', 'Suitable',
	        'Not suitable',
	        'total_period', '1960 or before', '1961 to 1980', '1981 to 1990', '1991 to 2000', '2001 to 2005',
	        '2006 to 2010',
	        '2011 to 2016', 'owned_med_cost', 'owned_ave_cost', 'owned_med_dwe_value', 'owned_ave_dwe_value',
	        'total_tenant',
	        'receives_subsidy_rat', 'more30%income_rat', 'rented_med_cost', 'rented_ave_cost', 'owner_ratio',
	        'renter_ratio',
	        'condominium_ratio', 'not_condominium_ratio', 'no_bedrooms_ratio', '1_bedroom_ratio', '2_bedrooms_ratio',
	        '3_bedrooms_ratio',
	        '4_plus_bedrooms_ratio', '1_4_rooms_ratio', '5_rooms_ratio', '6_rooms_ratio', '7_rooms_ratio',
	        '8_plus_rooms_ratio',
	        '1_person_per_room_ratio', '1_plus_person_per_room_ratio', 'suitable_ratio', 'not_suitable_ratio',
	        'building_age_div_si',
	        'building_age_div_sh', 'dwelling_div_rooms_si', 'dwelling_div_rooms_sh', 'dwelling_div_bedrooms_si',
	        'dwelling_div_bedrooms_sh',
	        'income_recipients', 'after_tax_recipients', 'med_income_after_tax', 'mkt_recipients', 'med_mkt_income',
	        'n_gov_transfers',
	        'median_gov_transfers', 'n_emp_income', 'med_emp_income', 'total_income_stats', 'mkt_income', 'emp_income',
	        'gov_transfers', 'total_income_groups',
	        'without_income',
	        'with_income',
	        'income_ratio',
	        'total_income_after_tax',
	        'without_income_at',
	        'with_income_at',
	        'income_ratio_at',
	        '    Under $10;000 (including loss)',
	        '    $10;000 to $19;999',
	        '    $20;000 to $29;999',
	        '    $30;000 to $39;999',
	        '    $40;000 to $49;999',
	        '    $50;000 to $59;999',
	        '    $60;000 to $69;999',
	        '    $70;000 to $79;999',
	        '    $80;000 and over',
	        '      $80;000 to $89;999',
	        '      $90;000 to $99;999',
	        '      $100;000 and over',
	        'income_div_si',
	        'income_div_sh',
	        'Total - Main mode of commuting for the employed labour force aged 15 years and over in private households with a usual place of work or no fixed workplace address - 25% sample data',
	        '  Car; truck; van - as a driver',
	        '  Car; truck; van - as a passenger',
	        '  Public transit',
	        '  Walked',
	        '  Bicycle',
	        '  Other method',
	        'total_labour_force',
	        'In the labour force',
	        'Employed',
	        'Unemployed',
	        'Not in the labour force',
	        'Participation rate',
	        'Employment rate',
	        'Unemployment rate',
	        'total_class_worker',
	        'Class of worker - not applicable',
	        'All classes of workers',
	        'Employee',
	        'Self-employed',
	        'total_place',
	        'Worked at home',
	        'Worked outside Canada',
	        'No fixed workplace address',
	        'Worked at usual place',
	        'worked_home_ratio',
	        'worked_abroad_ratio',
	        'worked_flexible',
	        'worked_usual_ratio', 'node', 'bike', 'bus', 'median_income', 'drive']
	gdf = gdf.loc[:, [col for col in gdf if col not in DROP]]
	return gdf


dependent = ['walk']
train_random_forest_regression(GDF, dependent, [col for col in GDF.columns if col not in dependent + ['geometry']])
